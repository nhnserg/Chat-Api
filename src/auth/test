// import * as tokenService from '../token/token.sevice.js';
// import * as userService from '../user/user.service.js';

// export class AuthService {
//   async registerUser({ name, email, password }) {
//     const user = await userService.createUser({ name, email, password });
//     const tokens = tokenService.generateTokens({ userId: user._id });
//     await tokenService.saveToken(user._id, tokens.refreshToken);
//     return { user, ...tokens };
//   }

//   async loginUser({ email, password }) {
//     const user = await userService.findUserByEmail(email);
//     const isMatch = await user.comparePassword(password);
//     if (!isMatch) throw HttpError(401, 'Invalid credentials');
//     const tokens = tokenService.generateTokens({ userId: user._id });
//     await tokenService.saveToken(user._id, tokens.refreshToken);
//     return { user, ...tokens };
//   }

//   async logoutUser(refreshToken) {
//     await tokenService.removeToken(refreshToken);
//   }

//   async refresh(refreshToken) {
//     const payload = tokenService.validateRefreshToken(refreshToken);
//     if (!payload) throw HttpError(403, 'Invalid token');

//     const tokenExists = await tokenService.findToken(refreshToken);
//     if (!tokenExists) throw HttpError(403, 'Token not found');

//     const user = await userService.findUserById(payload.userId);
//     const tokens = tokenService.generateTokens({ userId: user._id });
//     await tokenService.saveToken(user._id, tokens.refreshToken);
//     return { user, ...tokens };
//   }
// }
